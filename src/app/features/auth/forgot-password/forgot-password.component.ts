import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { RouterModule, Router } from '@angular/router';
import { AuthService } from '../../../core/services/auth.service';

@Component({
  selector: 'app-forgot-password',
  standalone: true,
  imports: [CommonModule, FormsModule, RouterModule],
  templateUrl: './forgot-password.component.html',
  styleUrl: './forgot-password.component.css'
})
export class ForgotPasswordComponent {
  forgotPasswordData = {
    email: ''
  };

  emailSent = false;
  isLoading = false;
  errorMessage = '';
  resendCooldown = 0;
  private resendTimer: any;

  constructor(
    private router: Router,
    private authService: AuthService
  ) {}

  ngOnDestroy() {
    if (this.resendTimer) {
      clearInterval(this.resendTimer);
    }
  }

  onSubmit() {
    if (this.forgotPasswordData.email) {
      this.sendResetEmail();
    }
  }

  sendResetEmail() {
    this.isLoading = true;
    this.errorMessage = '';

    this.authService.forgotPassword(this.forgotPasswordData.email).subscribe({
      next: (response) => {
        console.log('Reset password email sent:', response);
        this.emailSent = true;
        this.startResendCooldown();
      },
      error: (error) => {
        console.error('Reset password email error:', error);
        this.errorMessage = error.error?.message || 'Failed to send reset email. Please try again.';
        this.isLoading = false;
      },
      complete: () => {
        this.isLoading = false;
      }
    });
  }

  resendEmail() {
    if (this.resendCooldown === 0) {
      this.sendResetEmail();
    }
  }

  private startResendCooldown() {
    this.resendCooldown = 60; // 60 seconds cooldown
    this.resendTimer = setInterval(() => {
      this.resendCooldown--;
      if (this.resendCooldown <= 0) {
        clearInterval(this.resendTimer);
      }
    }, 1000);
  }

  private generateResetToken(): string {
    // Generate a simple token for demo purposes
    // In production, this would be generated by your backend
    return Math.random().toString(36).substring(2) + Date.now().toString(36);
  }
}
