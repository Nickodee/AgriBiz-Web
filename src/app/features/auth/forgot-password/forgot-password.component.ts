import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { RouterModule, Router } from '@angular/router';

@Component({
  selector: 'app-forgot-password',
  standalone: true,
  imports: [CommonModule, FormsModule, RouterModule],
  templateUrl: './forgot-password.component.html',
  styleUrl: './forgot-password.component.css'
})
export class ForgotPasswordComponent {
  forgotPasswordData = {
    email: ''
  };

  emailSent = false;
  isLoading = false;
  errorMessage = '';
  resendCooldown = 0;
  private resendTimer: any;

  constructor(private router: Router) {}

  ngOnDestroy() {
    if (this.resendTimer) {
      clearInterval(this.resendTimer);
    }
  }

  onSubmit() {
    if (this.forgotPasswordData.email) {
      this.sendResetEmail();
    }
  }

  sendResetEmail() {
    this.isLoading = true;
    this.errorMessage = '';

    // Simulate API call - replace with actual service call
    setTimeout(() => {
      // Simulate random success/failure for demo
      const success = Math.random() > 0.2; // 80% success rate

      if (success) {
        this.emailSent = true;
        this.isLoading = false;
        this.startResendCooldown();
        
        // Here you would make an actual API call to send the reset email
        console.log('Password reset email sent to:', this.forgotPasswordData.email);
        
        // For demo purposes, generate a reset token and log the reset URL
        const resetToken = this.generateResetToken();
        const resetUrl = `${window.location.origin}/change-password?token=${resetToken}`;
        console.log('Reset URL (for demo):', resetUrl);
        
        // In a real app, this URL would be sent via email to the user
      } else {
        this.isLoading = false;
        this.errorMessage = 'Email address not found. Please check your email and try again.';
      }
    }, 2000);
  }

  resendEmail() {
    if (this.resendCooldown === 0) {
      this.sendResetEmail();
    }
  }

  private startResendCooldown() {
    this.resendCooldown = 60; // 60 seconds cooldown
    this.resendTimer = setInterval(() => {
      this.resendCooldown--;
      if (this.resendCooldown <= 0) {
        clearInterval(this.resendTimer);
      }
    }, 1000);
  }

  private generateResetToken(): string {
    // Generate a simple token for demo purposes
    // In production, this would be generated by your backend
    return Math.random().toString(36).substring(2) + Date.now().toString(36);
  }
}
